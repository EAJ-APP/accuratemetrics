# -*- coding: utf-8 -*-
"""Prueba Causal Impact.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1MpAwEx2NzKRYE-y6WIwcDuY3aec_0ug9
"""

"""
=============================================================================
GOOGLE COLAB - SOLUCI√ìN QUE S√ç FUNCIONA (2024)
=============================================================================
Usando pycausalimpact que es compatible con numpy 2.0+
VERSI√ìN CORREGIDA - Gr√°ficos funcionando correctamente
"""

# =============================================================================
# CELDA 1: INSTALACI√ìN (Ejecuta PRIMERO)
# =============================================================================

!pip install -q pycausalimpact
print("‚úÖ Instalaci√≥n completada")
print("üëâ Ahora ejecuta la CELDA 2 (NO necesitas reiniciar)")

# =============================================================================
# CELDA 2: IMPORTAR TODO
# =============================================================================

import warnings
warnings.filterwarnings('ignore')

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
from datetime import datetime, timedelta

# Importar CausalImpact
from causalimpact import CausalImpact

print("‚úÖ Todas las librer√≠as importadas correctamente")
print("‚úÖ CausalImpact est√° listo para usar")

# =============================================================================
# CELDA 3: GENERAR DATOS DE EJEMPLO
# =============================================================================

def generar_datos_ejemplo():
    """Genera datos realistas de e-commerce con tr√°fico web"""
    np.random.seed(2023)
    dates = pd.date_range('2023-01-01', periods=365, freq='D')

    # === VARIABLES DE CONTROL (Tr√°fico Web) ===

    # Sesiones totales (con tendencia y estacionalidad semanal)
    trend = np.linspace(10000, 12000, 365)
    day_of_week = dates.dayofweek
    weekly_effect = np.where(day_of_week >= 5, -2000, 500)
    sesiones = trend + weekly_effect + np.random.normal(0, 500, 365)
    sesiones = np.maximum(sesiones, 1000)

    # Usuarios √∫nicos (70-80% de sesiones)
    usuarios = sesiones * np.random.uniform(0.70, 0.80, 365)

    # Tr√°fico org√°nico (60% de sesiones)
    trafico_org = sesiones * np.random.uniform(0.55, 0.65, 365)

    # Tr√°fico directo (25% de sesiones)
    trafico_dir = sesiones * np.random.uniform(0.20, 0.30, 365)

    # Bounce rate (40-50%)
    bounce_rate = np.random.uniform(38, 52, 365)

    # P√°ginas por sesi√≥n (2.5 - 4.5)
    paginas = np.random.uniform(2.5, 4.5, 365)

    # === CONVERSIONES (Variable de respuesta) ===
    conversion_rate_base = 0.025  # 2.5%

    conversiones = (
        sesiones * conversion_rate_base +
        0.0003 * usuarios +
        0.0002 * trafico_org -
        0.5 * bounce_rate +
        15 * paginas +
        np.random.normal(0, 30, 365)
    )
    conversiones = np.maximum(conversiones, 50)

    # === AGREGAR EFECTOS DE INTERVENCIONES ===
    # Intervenci√≥n 1: Abril (d√≠as 90-120)
    conversiones[90:121] *= 1.15  # +15%

    # Intervenci√≥n 2: Septiembre (d√≠as 243-273)
    conversiones[243:274] *= 1.25  # +25%

    # === CREAR DATAFRAME ===
    data = pd.DataFrame({
        'y': conversiones,  # Primera columna DEBE ser 'y' para pycausalimpact
        'sesiones_totales': sesiones,
        'usuarios_unicos': usuarios,
        'trafico_organico': trafico_org,
        'trafico_directo': trafico_dir,
        'bounce_rate': bounce_rate,
        'paginas_por_sesion': paginas
    }, index=dates)

    return data

# Generar datos
print("\n" + "="*70)
print("GENERANDO DATOS DE EJEMPLO")
print("="*70)

data = generar_datos_ejemplo()

print(f"\n‚úÖ Datos generados:")
print(f"  ‚Ä¢ Total d√≠as: {len(data)}")
print(f"  ‚Ä¢ Per√≠odo: {data.index.min().date()} a {data.index.max().date()}")
print(f"  ‚Ä¢ Intervenci√≥n 1: 2023-04-01 al 2023-05-01")
print(f"  ‚Ä¢ Intervenci√≥n 2: 2023-09-01 al 2023-10-01")

print(f"\nüìä Columnas disponibles:")
for col in data.columns:
    print(f"  ‚Ä¢ {col}")

print(f"\nüìà Primeras 5 filas:")
print(data.head())

print(f"\nüìâ Estad√≠sticas:")
print(data.describe().round(2))

# =============================================================================
# CELDA 4: VISUALIZAR DATOS
# =============================================================================

print("\n" + "="*70)
print("VISUALIZACI√ìN DE DATOS")
print("="*70)

fig, axes = plt.subplots(3, 2, figsize=(16, 12))

# Gr√°fico 1: Conversiones con intervenciones marcadas
axes[0, 0].plot(data.index, data['y'], linewidth=1.5, color='#2ecc71', label='Conversiones')
axes[0, 0].axvspan(pd.Timestamp('2023-04-01'), pd.Timestamp('2023-05-01'),
                   alpha=0.2, color='red', label='Intervenci√≥n Abril')
axes[0, 0].axvspan(pd.Timestamp('2023-09-01'), pd.Timestamp('2023-10-01'),
                   alpha=0.2, color='orange', label='Intervenci√≥n Sept')
axes[0, 0].set_title('Conversiones Diarias', fontweight='bold', fontsize=13)
axes[0, 0].set_ylabel('Conversiones')
axes[0, 0].legend()
axes[0, 0].grid(True, alpha=0.3)

# Gr√°fico 2: Sesiones totales
axes[0, 1].plot(data.index, data['sesiones_totales'], linewidth=1.5, color='#3498db')
axes[0, 1].set_title('Sesiones Totales (Control)', fontweight='bold', fontsize=13)
axes[0, 1].set_ylabel('Sesiones')
axes[0, 1].grid(True, alpha=0.3)

# Gr√°fico 3: Usuarios √∫nicos
axes[1, 0].plot(data.index, data['usuarios_unicos'], linewidth=1.5, color='#9b59b6')
axes[1, 0].set_title('Usuarios √önicos (Control)', fontweight='bold', fontsize=13)
axes[1, 0].set_ylabel('Usuarios')
axes[1, 0].grid(True, alpha=0.3)

# Gr√°fico 4: Tr√°fico org√°nico
axes[1, 1].plot(data.index, data['trafico_organico'], linewidth=1.5, color='#f39c12')
axes[1, 1].set_title('Tr√°fico Org√°nico (Control)', fontweight='bold', fontsize=13)
axes[1, 1].set_ylabel('Sesiones Org√°nicas')
axes[1, 1].grid(True, alpha=0.3)

# Gr√°fico 5: Correlaciones
corr = data.corr()['y'].sort_values(ascending=False)[1:]
colors_corr = ['#2ecc71' if x > 0.5 else '#e74c3c' if x < -0.5 else '#95a5a6' for x in corr.values]
axes[2, 0].barh(range(len(corr)), corr.values, color=colors_corr)
axes[2, 0].set_yticks(range(len(corr)))
axes[2, 0].set_yticklabels(corr.index, fontsize=10)
axes[2, 0].set_xlabel('Correlaci√≥n con Conversiones')
axes[2, 0].set_title('Correlaciones', fontweight='bold', fontsize=13)
axes[2, 0].axvline(0, color='black', linewidth=1)
axes[2, 0].grid(True, alpha=0.3, axis='x')

# Gr√°fico 6: Matriz de correlaci√≥n
sns.heatmap(data.corr(), annot=True, fmt='.2f', cmap='RdYlGn',
            center=0, ax=axes[2, 1], cbar_kws={'label': 'Correlaci√≥n'},
            vmin=-1, vmax=1)
axes[2, 1].set_title('Matriz de Correlaci√≥n', fontweight='bold', fontsize=13)

plt.suptitle('An√°lisis Exploratorio - Datos de Tr√°fico Web',
             fontsize=16, fontweight='bold')
plt.tight_layout()
plt.show()

print("\n‚úÖ Visualizaci√≥n completada")
print("\nüëâ Las variables con correlaci√≥n > 0.5 son buenos controles")

# =============================================================================
# CELDA 5 CORREGIDA: ANALIZAR INTERVENCI√ìN DE ABRIL
# =============================================================================

print("\n" + "="*70)
print("AN√ÅLISIS: INTERVENCI√ìN DE ABRIL (1 abril - 1 mayo)")
print("="*70)

# ‚úÖ SOLUCI√ìN CORRECTA: Usar timestamps de pandas directamente
pre_abril = [pd.Timestamp('2023-01-01'), pd.Timestamp('2023-03-31')]
post_abril = [pd.Timestamp('2023-04-01'), pd.Timestamp('2023-05-01')]

print(f"\nüìã Configuraci√≥n:")
print(f"  ‚Ä¢ Per√≠odo PRE:  {pre_abril[0].date()} a {pre_abril[1].date()}")
print(f"  ‚Ä¢ Per√≠odo POST: {post_abril[0].date()} a {post_abril[1].date()}")
print(f"  ‚Ä¢ Variable respuesta: Conversiones (y)")
print(f"  ‚Ä¢ Variables control: sesiones_totales, usuarios_unicos, trafico_organico")

# Ejecutar CausalImpact con configuraci√≥n mejorada
print(f"\n‚öôÔ∏è Ejecutando CausalImpact...")

try:
    ci_abril = CausalImpact(
        data,
        pre_abril,
        post_abril,
        model_args={
            'nseasons': [{'period': 7}],  # Estacionalidad semanal
            'standardize': True
        }
    )
    print("‚úÖ An√°lisis completado exitosamente")
except Exception as e:
    print(f"‚ùå Error con todas las variables: {e}")
    print("\nIntentando con variables reducidas...")
    data_simple = data[['y', 'sesiones_totales', 'usuarios_unicos']].copy()
    ci_abril = CausalImpact(
        data_simple,
        pre_abril,
        post_abril,
        model_args={'nseasons': [{'period': 7}]}
    )
    print("‚úÖ An√°lisis completado con variables reducidas")

# Mostrar resultados
print("\n" + "‚îÄ"*70)
print("RESULTADOS ABRIL")
print("‚îÄ"*70)
print(ci_abril.summary())
print("\n" + ci_abril.summary(output='report'))

# Visualizar con t√≠tulos mejorados
print("\nüìä Generando gr√°ficos...")
ci_abril.plot()
plt.suptitle('An√°lisis CausalImpact - Intervenci√≥n Abril 2023',
             fontsize=14, fontweight='bold', y=1.02)
plt.tight_layout()
plt.show()

# Interpretaci√≥n detallada
print("\n" + "="*70)
print("INTERPRETACI√ìN ABRIL")
print("="*70)

summary = ci_abril.summary_data

efecto_promedio = summary['average']['actual'] - summary['average']['predicted']
efecto_total = summary['cumulative']['actual'] - summary['cumulative']['predicted']
efecto_relativo = (efecto_promedio / summary['average']['predicted']) * 100
p_value = ci_abril.p_value

print(f"\nüìä M√©tricas clave:")
print(f"  ‚Ä¢ Conversiones promedio observadas: {summary['average']['actual']:.2f}")
print(f"  ‚Ä¢ Conversiones promedio predichas (sin intervenci√≥n): {summary['average']['predicted']:.2f}")
print(f"  ‚Ä¢ Efecto diario promedio: {efecto_promedio:+.2f} conversiones")
print(f"  ‚Ä¢ Efecto acumulativo total: {efecto_total:+.2f} conversiones")
print(f"  ‚Ä¢ Cambio porcentual: {efecto_relativo:+.2f}%")
print(f"  ‚Ä¢ P-valor: {p_value:.4f}")
print(f"  ‚Ä¢ Intervalo 95%: [{summary['average']['predicted_lower']:.2f}, {summary['average']['predicted_upper']:.2f}]")

print(f"\nüí° Conclusi√≥n:")
if p_value < 0.01:
    sig = "muy significativo (p < 0.01) ‚úÖ‚úÖ‚úÖ"
elif p_value < 0.05:
    sig = "significativo (p < 0.05) ‚úÖ"
elif p_value < 0.10:
    sig = "marginalmente significativo (p < 0.10) ‚ö†Ô∏è"
else:
    sig = "NO significativo (p >= 0.10) ‚ùå"

print(f"  El efecto es {sig}")

if p_value < 0.05:
    if efecto_promedio > 0:
        print(f"\n  üéØ La intervenci√≥n de ABRIL tuvo un impacto POSITIVO:")
        print(f"     ‚Ä¢ Gener√≥ {abs(efecto_promedio):.0f} conversiones adicionales por d√≠a")
        print(f"     ‚Ä¢ Total de {abs(efecto_total):.0f} conversiones extra en el per√≠odo")
        print(f"     ‚Ä¢ Aumento del {abs(efecto_relativo):.1f}%")
    else:
        print(f"\n  ‚ö†Ô∏è La intervenci√≥n de ABRIL tuvo un impacto NEGATIVO:")
        print(f"     ‚Ä¢ Se perdieron {abs(efecto_promedio):.0f} conversiones por d√≠a")
        print(f"     ‚Ä¢ Total de {abs(efecto_total):.0f} conversiones perdidas")
        print(f"     ‚Ä¢ Disminuci√≥n del {abs(efecto_relativo):.1f}%")
else:
    print(f"\n  ‚ÑπÔ∏è No hay evidencia estad√≠stica suficiente de que la intervenci√≥n")
    print(f"     de abril haya tenido un efecto causal en las conversiones.")

# =============================================================================
# CELDA 6 CORREGIDA: ANALIZAR INTERVENCI√ìN DE SEPTIEMBRE
# =============================================================================

print("\n" + "="*70)
print("AN√ÅLISIS: INTERVENCI√ìN DE SEPTIEMBRE (1 sept - 1 oct)")
print("="*70)

# ‚úÖ SOLUCI√ìN CORRECTA: Usar timestamps de pandas directamente
pre_sept = [pd.Timestamp('2023-01-01'), pd.Timestamp('2023-08-31')]
post_sept = [pd.Timestamp('2023-09-01'), pd.Timestamp('2023-10-01')]

print(f"\nüìã Configuraci√≥n:")
print(f"  ‚Ä¢ Per√≠odo PRE:  {pre_sept[0].date()} a {pre_sept[1].date()}")
print(f"  ‚Ä¢ Per√≠odo POST: {post_sept[0].date()} a {post_sept[1].date()}")

print(f"\n‚öôÔ∏è Ejecutando CausalImpact...")

try:
    ci_sept = CausalImpact(
        data,
        pre_sept,
        post_sept,
        model_args={
            'nseasons': [{'period': 7}],
            'standardize': True
        }
    )
    print("‚úÖ An√°lisis completado exitosamente")
except Exception as e:
    print(f"‚ùå Error con todas las variables: {e}")
    data_simple = data[['y', 'sesiones_totales', 'usuarios_unicos']].copy()
    ci_sept = CausalImpact(
        data_simple,
        pre_sept,
        post_sept,
        model_args={'nseasons': [{'period': 7}]}
    )
    print("‚úÖ An√°lisis completado con variables reducidas")

# Mostrar resultados
print("\n" + "‚îÄ"*70)
print("RESULTADOS SEPTIEMBRE")
print("‚îÄ"*70)
print(ci_sept.summary())
print("\n" + ci_sept.summary(output='report'))

# Visualizar
print("\nüìä Generando gr√°ficos...")
ci_sept.plot()
plt.suptitle('An√°lisis CausalImpact - Intervenci√≥n Septiembre 2023',
             fontsize=14, fontweight='bold', y=1.02)
plt.tight_layout()
plt.show()

# Interpretaci√≥n
print("\n" + "="*70)
print("INTERPRETACI√ìN SEPTIEMBRE")
print("="*70)

summary_sept = ci_sept.summary_data

efecto_promedio_sept = summary_sept['average']['actual'] - summary_sept['average']['predicted']
efecto_total_sept = summary_sept['cumulative']['actual'] - summary_sept['cumulative']['predicted']
efecto_relativo_sept = (efecto_promedio_sept / summary_sept['average']['predicted']) * 100
p_value_sept = ci_sept.p_value

print(f"\nüìä M√©tricas clave:")
print(f"  ‚Ä¢ Conversiones promedio observadas: {summary_sept['average']['actual']:.2f}")
print(f"  ‚Ä¢ Conversiones promedio predichas: {summary_sept['average']['predicted']:.2f}")
print(f"  ‚Ä¢ Efecto diario promedio: {efecto_promedio_sept:+.2f} conversiones")
print(f"  ‚Ä¢ Efecto acumulativo total: {efecto_total_sept:+.2f} conversiones")
print(f"  ‚Ä¢ Cambio porcentual: {efecto_relativo_sept:+.2f}%")
print(f"  ‚Ä¢ P-valor: {p_value_sept:.4f}")

print(f"\nüí° Conclusi√≥n:")
if p_value_sept < 0.01:
    sig = "muy significativo (p < 0.01) ‚úÖ‚úÖ‚úÖ"
elif p_value_sept < 0.05:
    sig = "significativo (p < 0.05) ‚úÖ"
elif p_value_sept < 0.10:
    sig = "marginalmente significativo (p < 0.10) ‚ö†Ô∏è"
else:
    sig = "NO significativo (p >= 0.10) ‚ùå"

print(f"  El efecto es {sig}")

if p_value_sept < 0.05:
    if efecto_promedio_sept > 0:
        print(f"\n  üéØ La intervenci√≥n de SEPTIEMBRE tuvo un impacto POSITIVO:")
        print(f"     ‚Ä¢ Gener√≥ {abs(efecto_promedio_sept):.0f} conversiones adicionales por d√≠a")
        print(f"     ‚Ä¢ Total de {abs(efecto_total_sept):.0f} conversiones extra")
        print(f"     ‚Ä¢ Aumento del {abs(efecto_relativo_sept):.1f}%")
    else:
        print(f"\n  ‚ö†Ô∏è La intervenci√≥n de SEPTIEMBRE tuvo un impacto NEGATIVO")
else:
    print(f"\n  ‚ÑπÔ∏è No hay evidencia estad√≠stica suficiente de efecto causal")

# =============================================================================
# CELDA 7: COMPARAR AMBAS INTERVENCIONES
# =============================================================================

print("\n" + "="*70)
print("COMPARACI√ìN DE INTERVENCIONES")
print("="*70)

# Crear tabla comparativa
comparacion = pd.DataFrame({
    'Intervenci√≥n': ['Abril', 'Septiembre'],
    'Efecto_Diario': [efecto_promedio, efecto_promedio_sept],
    'Efecto_Total': [efecto_total, efecto_total_sept],
    'Cambio_%': [efecto_relativo, efecto_relativo_sept],
    'P_value': [p_value, p_value_sept],
    'Significativo': [
        '‚úÖ S√≠' if p_value < 0.05 else '‚ùå No',
        '‚úÖ S√≠' if p_value_sept < 0.05 else '‚ùå No'
    ]
})

print("\nüìä TABLA COMPARATIVA:")
print("‚îÄ"*70)
print(comparacion.to_string(index=False))

# ¬øCu√°l fue m√°s efectiva?
print("\nüèÜ RANKING DE EFECTIVIDAD:")
if p_value < 0.05 and p_value_sept < 0.05:
    if abs(efecto_relativo) > abs(efecto_relativo_sept):
        print(f"  1¬∫ ABRIL: {efecto_relativo:+.1f}% de cambio")
        print(f"  2¬∫ SEPTIEMBRE: {efecto_relativo_sept:+.1f}% de cambio")
    else:
        print(f"  1¬∫ SEPTIEMBRE: {efecto_relativo_sept:+.1f}% de cambio")
        print(f"  2¬∫ ABRIL: {efecto_relativo:+.1f}% de cambio")
elif p_value < 0.05:
    print(f"  Solo ABRIL mostr√≥ efecto significativo ({efecto_relativo:+.1f}%)")
elif p_value_sept < 0.05:
    print(f"  Solo SEPTIEMBRE mostr√≥ efecto significativo ({efecto_relativo_sept:+.1f}%)")
else:
    print(f"  Ninguna intervenci√≥n mostr√≥ efecto estad√≠sticamente significativo")

# Visualizaci√≥n comparativa
fig, axes = plt.subplots(1, 3, figsize=(15, 5))

nombres = comparacion['Intervenci√≥n']
colors = ['#2ecc71' if p < 0.05 else '#95a5a6' for p in comparacion['P_value']]

# Efecto diario
axes[0].barh(nombres, comparacion['Efecto_Diario'], color=colors, edgecolor='black')
axes[0].set_xlabel('Conversiones/D√≠a', fontsize=12)
axes[0].set_title('Efecto Diario Promedio', fontweight='bold', fontsize=13)
axes[0].axvline(0, color='black', linewidth=1)
axes[0].grid(True, alpha=0.3, axis='x')
for i, v in enumerate(comparacion['Efecto_Diario']):
    axes[0].text(v, i, f' {v:+.1f}', va='center', fontsize=10, fontweight='bold')

# Efecto total
axes[1].barh(nombres, comparacion['Efecto_Total'], color=colors, edgecolor='black')
axes[1].set_xlabel('Conversiones Totales', fontsize=12)
axes[1].set_title('Efecto Acumulativo Total', fontweight='bold', fontsize=13)
axes[1].axvline(0, color='black', linewidth=1)
axes[1].grid(True, alpha=0.3, axis='x')
for i, v in enumerate(comparacion['Efecto_Total']):
    axes[1].text(v, i, f' {v:+.0f}', va='center', fontsize=10, fontweight='bold')

# Cambio porcentual
axes[2].barh(nombres, comparacion['Cambio_%'], color=colors, edgecolor='black')
axes[2].set_xlabel('Cambio %', fontsize=12)
axes[2].set_title('Efecto Relativo (%)', fontweight='bold', fontsize=13)
axes[2].axvline(0, color='black', linewidth=1)
axes[2].grid(True, alpha=0.3, axis='x')
for i, v in enumerate(comparacion['Cambio_%']):
    axes[2].text(v, i, f' {v:+.1f}%', va='center', fontsize=10, fontweight='bold')

plt.suptitle('Comparaci√≥n de Intervenciones - Verde=Significativo, Gris=No Significativo',
             fontsize=14, fontweight='bold')
plt.tight_layout()
plt.show()

print("\n" + "="*70)
print("‚úÖ AN√ÅLISIS COMPLETADO")
print("="*70)

print("\nüíæ Variables disponibles:")
print("  ‚Ä¢ data           ‚Üí DataFrame con todos los datos")
print("  ‚Ä¢ ci_abril       ‚Üí Resultados de intervenci√≥n abril")
print("  ‚Ä¢ ci_sept        ‚Üí Resultados de intervenci√≥n septiembre")
print("  ‚Ä¢ comparacion    ‚Üí Tabla comparativa")

print("\nüí° Para guardar resultados:")
print("  comparacion.to_csv('resultados.csv', index=False)")

print("\nüìö Para m√°s an√°lisis:")
print("  ‚Ä¢ ci_abril.inferences  ‚Üí Series temporales detalladas")
print("  ‚Ä¢ ci_abril.summary_data ‚Üí Diccionario con todas las m√©tricas")

# =============================================================================
# CELDA 8 (OPCIONAL): GUARDAR Y DESCARGAR RESULTADOS
# =============================================================================

print("\n" + "="*70)
print("GUARDAR RESULTADOS")
print("="*70)

# Guardar comparaci√≥n
comparacion.to_csv('comparacion_intervenciones.csv', index=False)
print("‚úÖ comparacion_intervenciones.csv")

# Guardar series temporales
ci_abril.inferences.to_csv('serie_temporal_abril.csv')
print("‚úÖ serie_temporal_abril.csv")

ci_sept.inferences.to_csv('serie_temporal_septiembre.csv')
print("‚úÖ serie_temporal_septiembre.csv")

# Descargar archivos (en Colab)
print("\nüì• Descargando archivos...")
from google.colab import files
files.download('comparacion_intervenciones.csv')
files.download('serie_temporal_abril.csv')
files.download('serie_temporal_septiembre.csv')

print("\n‚úÖ ¬°Archivos descargados correctamente!")