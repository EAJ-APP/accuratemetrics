"""
P√°gina de An√°lisis de Impacto Causal
AccurateMetrics - Fase 2
"""
import streamlit as st
import pandas as pd
from datetime import datetime, timedelta
import sys
import os

# A√±adir el directorio ra√≠z al path
sys.path.insert(0, os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

# ============================================================================
# CONFIGURACI√ìN DE LA P√ÅGINA
# ============================================================================
st.set_page_config(
    page_title="Causal Impact - AccurateMetrics",
    page_icon="üìà",
    layout="wide",
    initial_sidebar_state="expanded"
)

# ============================================================================
# VERIFICAR DEPENDENCIAS
# ============================================================================
try:
    from src.analysis.causal_impact import CausalImpactAnalyzer
    from src.visualization.impact_plots import ImpactVisualizer
    DEPENDENCIES_OK = True
except ImportError as e:
    DEPENDENCIES_OK = False
    st.error(f"‚ùå Error importando m√≥dulos: {e}")
    st.info("""
    Por favor, aseg√∫rate de:
    1. Instalar las dependencias: `pip install -r requirements.txt`
    2. Verificar que pycausalimpact est√© instalado: `pip install pycausalimpact`
    """)
    st.stop()

# ============================================================================
# T√çTULO Y DESCRIPCI√ìN
# ============================================================================
st.title("üìà An√°lisis de Impacto Causal")
st.markdown("""
Analiza el impacto de intervenciones en tus m√©tricas de Google Analytics usando 
la metodolog√≠a **Causal Impact** de Google.
""")

# ============================================================================
# VERIFICAR DATOS
# ============================================================================
if 'ga4_data' not in st.session_state or st.session_state.ga4_data is None:
    st.warning("‚ö†Ô∏è No hay datos de GA4 cargados")
    st.info("""
    üëâ Por favor, ve a la p√°gina principal y:
    1. Autent√≠cate con Google
    2. Selecciona una propiedad de GA4
    3. Extrae los datos
    """)
    
    if st.button("üè† Ir a la p√°gina principal"):
        st.switch_page("app.py")
    st.stop()

# ============================================================================
# SIDEBAR - CONFIGURACI√ìN
# ============================================================================
with st.sidebar:
    st.header("‚öôÔ∏è Configuraci√≥n del An√°lisis")
    
    # Selecci√≥n de m√©trica
    st.subheader("üìä M√©trica a Analizar")
    metric_column = st.selectbox(
        "Selecciona la m√©trica:",
        options=['sessions', 'conversions'],
        format_func=lambda x: 'Sesiones' if x == 'sessions' else 'Conversiones',
        help="Elige qu√© m√©trica quieres analizar"
    )
    
    st.markdown("---")
    
    # Fecha de intervenci√≥n
    st.subheader("üìÖ Fecha de Intervenci√≥n")
    
    # Obtener rango de fechas disponibles
    df = st.session_state.ga4_data
    min_date = df['date'].min()
    max_date = df['date'].max()
    
    # Calcular fecha por defecto (mitad del per√≠odo)
    days_range = (max_date - min_date).days
    default_intervention = min_date + timedelta(days=days_range // 2)
    
    intervention_date = st.date_input(
        "¬øCu√°ndo ocurri√≥ la intervenci√≥n?",
        value=default_intervention,
        min_value=min_date + timedelta(days=14),  # Necesitamos al menos 2 semanas pre
        max_value=max_date - timedelta(days=7),   # Necesitamos al menos 1 semana post
        help="La fecha cuando implementaste el cambio que quieres medir"
    )
    
    st.markdown("---")
    
    # Configuraci√≥n de per√≠odos
    st.subheader("‚è±Ô∏è Per√≠odos de An√°lisis")
    
    use_custom_periods = st.checkbox(
        "Personalizar per√≠odos",
        value=False,
        help="Por defecto se usa todo el per√≠odo disponible"
    )
    
    if use_custom_periods:
        # Per√≠odo pre-intervenci√≥n
        max_pre_days = (intervention_date - min_date.date()).days
        pre_period_days = st.slider(
            "D√≠as pre-intervenci√≥n:",
            min_value=14,
            max_value=max_pre_days,
            value=min(30, max_pre_days),
            help="Per√≠odo de entrenamiento antes de la intervenci√≥n"
        )
        
        # Per√≠odo post-intervenci√≥n
        max_post_days = (max_date.date() - intervention_date).days
        post_period_days = st.slider(
            "D√≠as post-intervenci√≥n:",
            min_value=7,
            max_value=max_post_days,
            value=min(14, max_post_days),
            help="Per√≠odo de evaluaci√≥n despu√©s de la intervenci√≥n"
        )
    else:
        pre_period_days = None
        post_period_days = None
    
    st.markdown("---")
    
    # Informaci√≥n sobre los per√≠odos
    st.info(f"""
    **üìä Resumen de datos:**
    - Total de d√≠as: {len(df)}
    - Desde: {min_date.strftime('%d/%m/%Y')}
    - Hasta: {max_date.strftime('%d/%m/%Y')}
    """)

# ============================================================================
# √ÅREA PRINCIPAL
# ============================================================================

# Tabs para organizar el contenido
tab1, tab2, tab3, tab4 = st.tabs([
    "üìä An√°lisis", 
    "üìà Visualizaciones", 
    "üìã Resumen", 
    "‚ùì Ayuda"
])

# ============================================================================
# TAB 1: AN√ÅLISIS
# ============================================================================
with tab1:
    st.header("üî¨ Ejecutar An√°lisis de Impacto Causal")
    
    # Mostrar configuraci√≥n actual
    col1, col2, col3 = st.columns(3)
    
    with col1:
        st.metric("M√©trica", metric_column.title())
    with col2:
        st.metric("Fecha Intervenci√≥n", intervention_date.strftime('%d/%m/%Y'))
    with col3:
        period_text = "Personalizado" if use_custom_periods else "Completo"
        st.metric("Per√≠odo", period_text)
    
    st.markdown("---")
    
    # Bot√≥n de an√°lisis
    if st.button("üöÄ Ejecutar An√°lisis", type="primary", use_container_width=True):
        
        with st.spinner("üîÑ Preparando datos..."):
            try:
                # Crear analizador
                analyzer = CausalImpactAnalyzer(
                    data=st.session_state.ga4_data,
                    metric_column=metric_column
                )
                
                # Validar datos
                is_valid, validation_msg = analyzer.validate_data_requirements()
                
                if not is_valid:
                    st.error(f"‚ùå {validation_msg}")
                    st.stop()
                
                st.success("‚úÖ Datos validados correctamente")
            
            except Exception as e:
                st.error(f"‚ùå Error preparando datos: {e}")
                st.stop()
        
        with st.spinner("üìà Ejecutando an√°lisis de Causal Impact..."):
            try:
                # Ejecutar an√°lisis
                results = analyzer.analyze_single_intervention(
                    intervention_date=intervention_date.strftime('%Y-%m-%d'),
                    pre_period_days=pre_period_days,
                    post_period_days=post_period_days
                )
                
                # Guardar resultados en session_state
                st.session_state.causal_results = results
                st.session_state.causal_analyzer = analyzer
                st.session_state.causal_plot_data = analyzer.get_plot_data()
                st.session_state.causal_intervention_date = pd.to_datetime(intervention_date)
                
                st.success("‚úÖ An√°lisis completado exitosamente")
                
            except Exception as e:
                st.error(f"‚ùå Error en el an√°lisis: {e}")
                st.info("""
                Posibles causas:
                - Per√≠odo pre-intervenci√≥n muy corto (m√≠nimo 14 d√≠as)
                - Datos insuficientes o con poca variabilidad
                - Fecha de intervenci√≥n muy cercana a los extremos
                """)
                st.stop()
        
        # Mostrar resumen inmediato
        st.markdown("---")
        st.subheader("üìä Resultados Principales")
        
        # M√©tricas principales
        col1, col2, col3, col4 = st.columns(4)
        
        with col1:
            efecto_promedio = results['average']['rel_effect'] * 100
            delta_color = "normal" if abs(efecto_promedio) < 5 else ("inverse" if efecto_promedio < 0 else "off")
            st.metric(
                "Efecto Promedio",
                f"{efecto_promedio:.1f}%",
                delta=f"{efecto_promedio:.1f}%",
                delta_color=delta_color
            )
        
        with col2:
            efecto_acumulado = results['cumulative']['rel_effect'] * 100
            st.metric(
                "Efecto Acumulado",
                f"{efecto_acumulado:.1f}%"
            )
        
        with col3:
            p_value = results['p_value']
            is_significant = results['is_significant']
            sig_text = "S√≠ ‚úÖ" if is_significant else "No ‚ö†Ô∏è"
            st.metric(
                "Significativo",
                sig_text,
                delta=f"p={p_value:.3f}"
            )
        
        with col4:
            impacto_absoluto = results['cumulative']['abs_effect']
            st.metric(
                f"{metric_column.title()} Impacto",
                f"{impacto_absoluto:,.0f}"
            )
        
        # Resumen narrativo
        st.markdown("---")
        summary_text = analyzer.get_summary_text()
        st.markdown(summary_text)

# ============================================================================
# TAB 2: VISUALIZACIONES
# ============================================================================
with tab2:
    st.header("üìà Visualizaciones del Impacto")
    
    if 'causal_results' not in st.session_state:
        st.info("üëÜ Ejecuta primero el an√°lisis en la pesta√±a 'An√°lisis'")
    else:
        visualizer = ImpactVisualizer()
        
        # Debug: Ver qu√© datos tenemos
        with st.expander("üîç Debug: Ver estructura de datos", expanded=False):
            if 'causal_plot_data' in st.session_state:
                plot_data = st.session_state.causal_plot_data
                st.write(f"Tipo de plot_data: {type(plot_data)}")
                st.write(f"Shape: {plot_data.shape if hasattr(plot_data, 'shape') else 'N/A'}")
                if not plot_data.empty:
                    st.write(f"Columnas: {plot_data.columns.tolist()}")
                    st.write("Primeras 5 filas:")
                    st.dataframe(plot_data.head())
                else:
                    st.write("DataFrame est√° vac√≠o")
            else:
                st.write("No hay datos de plot en session_state")
        
        # Gr√°fico principal
        try:
            st.subheader("1. Serie Temporal Completa")
            
            # Verificar que tenemos datos antes de graficar
            if 'causal_plot_data' in st.session_state and not st.session_state.causal_plot_data.empty:
                fig_main = visualizer.plot_impact_analysis(
                    plot_data=st.session_state.causal_plot_data,
                    intervention_date=st.session_state.causal_intervention_date,
                    metric_name=metric_column.title()
                )
                st.plotly_chart(fig_main, use_container_width=True)
            else:
                st.warning("‚ö†Ô∏è No hay datos suficientes para crear el gr√°fico principal")
        except Exception as e:
            st.error(f"Error creando gr√°fico principal: {str(e)}")
            with st.expander("Ver detalles del error"):
                import traceback
                st.code(traceback.format_exc())
        
        # Gr√°ficos secundarios
        col1, col2 = st.columns(2)
        
        with col1:
            try:
                st.subheader("2. Resumen de Efectos")
                fig_summary = visualizer.plot_summary_metrics(
                    st.session_state.causal_results
                )
                st.plotly_chart(fig_summary, use_container_width=True)
            except Exception as e:
                st.error(f"Error en gr√°fico de resumen: {str(e)[:100]}")
        
        with col2:
            try:
                st.subheader("3. Comparaci√≥n Pre vs Post")
                fig_comparison = visualizer.plot_period_comparison(
                    data=st.session_state.ga4_data,
                    intervention_date=st.session_state.causal_intervention_date,
                    metric_column=metric_column
                )
                st.plotly_chart(fig_comparison, use_container_width=True)
            except Exception as e:
                st.error(f"Error en comparaci√≥n: {str(e)[:100]}")

# ============================================================================
# TAB 3: RESUMEN
# ============================================================================
with tab3:
    st.header("üìã Resumen Detallado")
    
    if 'causal_results' not in st.session_state:
        st.info("üëÜ Ejecuta primero el an√°lisis en la pesta√±a 'An√°lisis'")
    else:
        results = st.session_state.causal_results
        
        # Informaci√≥n de per√≠odos
        st.subheader("üìÖ Per√≠odos Analizados")
        
        col1, col2, col3 = st.columns(3)
        
        with col1:
            st.markdown("**Pre-intervenci√≥n:**")
            st.write(f"Desde: {results['periods']['pre_period']['start']}")
            st.write(f"Hasta: {results['periods']['pre_period']['end']}")
            st.write(f"D√≠as: {results['periods']['pre_period']['days']}")
        
        with col2:
            st.markdown("**Intervenci√≥n:**")
            st.write(f"Fecha: {results['periods']['intervention_date']}")
        
        with col3:
            st.markdown("**Post-intervenci√≥n:**")
            st.write(f"Desde: {results['periods']['post_period']['start']}")
            st.write(f"Hasta: {results['periods']['post_period']['end']}")
            st.write(f"D√≠as: {results['periods']['post_period']['days']}")
        
        st.markdown("---")
        
        # Tabla de resultados detallados
        st.subheader("üìä M√©tricas Detalladas")
        
        # Crear DataFrame con resultados
        metrics_data = []
        
        # M√©tricas promedio
        avg = results['average']
        metrics_data.append({
            'Tipo': 'Promedio Diario',
            'Real': f"{avg['actual']:,.1f}",
            'Predicho': f"{avg['predicted']:,.1f}",
            'Efecto Absoluto': f"{avg['abs_effect']:,.1f}",
            'Efecto Relativo': f"{avg['rel_effect']*100:.1f}%",
            'IC Inferior': f"{avg['rel_effect_lower']*100:.1f}%",
            'IC Superior': f"{avg['rel_effect_upper']*100:.1f}%"
        })
        
        # M√©tricas acumuladas
        cum = results['cumulative']
        metrics_data.append({
            'Tipo': 'Acumulado Total',
            'Real': f"{cum['actual']:,.0f}",
            'Predicho': f"{cum['predicted']:,.0f}",
            'Efecto Absoluto': f"{cum['abs_effect']:,.0f}",
            'Efecto Relativo': f"{cum['rel_effect']*100:.1f}%",
            'IC Inferior': f"{cum['rel_effect_lower']*100:.1f}%",
            'IC Superior': f"{cum['rel_effect_upper']*100:.1f}%"
        })
        
        df_metrics = pd.DataFrame(metrics_data)
        st.dataframe(df_metrics, use_container_width=True, hide_index=True)
        
        st.markdown("---")
        
        # Interpretaci√≥n
        st.subheader("üéØ Interpretaci√≥n de Resultados")
        
        if results['is_significant']:
            if results['average']['rel_effect'] > 0:
                st.success("""
                ‚úÖ **Impacto Positivo Significativo**
                
                La intervenci√≥n tuvo un efecto positivo estad√≠sticamente significativo en las {}.
                Puedes confiar en que el cambio observado no se debe al azar.
                """.format(metric_column))
            else:
                st.warning("""
                ‚ö†Ô∏è **Impacto Negativo Significativo**
                
                La intervenci√≥n tuvo un efecto negativo estad√≠sticamente significativo en las {}.
                El cambio observado indica una disminuci√≥n real en la m√©trica.
                """.format(metric_column))
        else:
            st.info("""
            ‚ÑπÔ∏è **Impacto No Significativo**
            
            No hay evidencia estad√≠stica suficiente para afirmar que la intervenci√≥n 
            tuvo un efecto real en las {}. El cambio observado podr√≠a deberse al azar 
            o a la variabilidad natural de los datos.
            """.format(metric_column))
        
        # Exportar resultados
        st.markdown("---")
        st.subheader("üíæ Exportar Resultados")
        
        col1, col2 = st.columns(2)
        
        with col1:
            # Preparar datos para exportar
            export_data = st.session_state.causal_plot_data.copy()
            export_data['intervention'] = export_data.index >= st.session_state.causal_intervention_date
            
            csv = export_data.to_csv()
            st.download_button(
                label="üì• Descargar Datos (CSV)",
                data=csv,
                file_name=f"causal_impact_{datetime.now().strftime('%Y%m%d_%H%M%S')}.csv",
                mime="text/csv",
                use_container_width=True
            )
        
        with col2:
            # Crear resumen en texto
            report_text = f"""
REPORTE DE AN√ÅLISIS DE IMPACTO CAUSAL
=====================================
Fecha de generaci√≥n: {datetime.now().strftime('%Y-%m-%d %H:%M')}

CONFIGURACI√ìN
-------------
M√©trica analizada: {metric_column}
Fecha de intervenci√≥n: {results['periods']['intervention_date']}
Per√≠odo pre-intervenci√≥n: {results['periods']['pre_period']['days']} d√≠as
Per√≠odo post-intervenci√≥n: {results['periods']['post_period']['days']} d√≠as

RESULTADOS PRINCIPALES
----------------------
Efecto promedio: {results['average']['rel_effect']*100:.1f}%
Intervalo de confianza: [{results['average']['rel_effect_lower']*100:.1f}%, {results['average']['rel_effect_upper']*100:.1f}%]

Efecto acumulado: {results['cumulative']['abs_effect']:,.0f} {metric_column}
Efecto relativo acumulado: {results['cumulative']['rel_effect']*100:.1f}%

P-value: {results['p_value']:.4f}
Significancia estad√≠stica: {'S√≠' if results['is_significant'] else 'No'}

INTERPRETACI√ìN
--------------
{st.session_state.causal_analyzer.get_summary_text()}
            """
            
            st.download_button(
                label="üìÑ Descargar Reporte (TXT)",
                data=report_text,
                file_name=f"reporte_causal_impact_{datetime.now().strftime('%Y%m%d_%H%M%S')}.txt",
                mime="text/plain",
                use_container_width=True
            )

# ============================================================================
# TAB 4: AYUDA
# ============================================================================
with tab4:
    st.header("‚ùì Ayuda y Documentaci√≥n")
    
    st.markdown("""
    ### üìö ¬øQu√© es Causal Impact?
    
    **Causal Impact** es una metodolog√≠a desarrollada por Google para estimar el efecto causal 
    de una intervenci√≥n en una serie temporal. Utiliza un enfoque bayesiano para crear un 
    modelo contrafactual (qu√© hubiera pasado sin la intervenci√≥n) y lo compara con los 
    datos observados.
    
    ### üéØ ¬øCu√°ndo usar este an√°lisis?
    
    Este an√°lisis es √∫til cuando quieres medir el impacto de:
    - üöÄ Lanzamiento de campa√±as de marketing
    - üîÑ Cambios en el sitio web
    - üì± Actualizaciones de producto
    - üí∞ Cambios de precio
    - üì∞ Eventos de PR o noticias
    
    ### üìä Requisitos de datos
    
    Para obtener resultados confiables necesitas:
    - **M√≠nimo 21 d√≠as de datos** (idealmente m√°s de 30)
    - **Al menos 14 d√≠as pre-intervenci√≥n** para entrenar el modelo
    - **Al menos 7 d√≠as post-intervenci√≥n** para evaluar el impacto
    - **Datos con variabilidad** (no todos los valores iguales)
    
    ### üìà Interpretaci√≥n de resultados
    
    **Efecto Promedio:**
    - Cambio porcentual promedio diario en la m√©trica
    - Positivo = mejora, Negativo = empeoramiento
    
    **Efecto Acumulado:**
    - Suma total del impacto durante todo el per√≠odo post-intervenci√≥n
    - √ötil para entender el impacto total en t√©rminos absolutos
    
    **P-value y Significancia:**
    - P-value < 0.05 = Resultado estad√≠sticamente significativo
    - P-value ‚â• 0.05 = No hay evidencia suficiente de impacto
    
    **Intervalos de Confianza:**
    - Rango donde probablemente est√° el efecto real (95% de confianza)
    - Si incluye el 0, el efecto podr√≠a no ser real
    
    ### üîß Consejos para mejores resultados
    
    1. **M√°s datos = Mejor modelo**: Intenta tener al menos 30-60 d√≠as pre-intervenci√≥n
    2. **Evita m√∫ltiples cambios**: Analiza una intervenci√≥n a la vez
    3. **Considera la estacionalidad**: El modelo intenta detectarla autom√°ticamente
    4. **Valida los supuestos**: Revisa que no haya otros eventos importantes en el per√≠odo
    
    ### üìñ Referencias
    
    - [Paper original de Google](https://google.github.io/CausalImpact/CausalImpact.html)
    - [Documentaci√≥n de pycausalimpact](https://github.com/dafiti/causalimpact)
    """)

# ============================================================================
# FOOTER
# ============================================================================
st.markdown("---")
st.caption("AccurateMetrics v0.2 - An√°lisis de Impacto Causal | Powered by Google's CausalImpact")
